Archive member included to satisfy reference by file (symbol)

C:/devkitPro/libgba/lib\libgba.a(Div.o)
                              obj/common.o (Div)

Discarded input sections

 .text          0x00000000        0x0 obj/font_ascii.o
 .data          0x00000000        0x0 obj/font_ascii.o
 .bss           0x00000000        0x0 obj/font_ascii.o
 .text          0x00000000        0x0 obj/crt0.o
 .data          0x00000000        0x0 obj/crt0.o
 .bss           0x00000000        0x0 obj/crt0.o
 .text          0x00000000        0x0 obj/common.o
 .data          0x00000000        0x0 obj/common.o
 .bss           0x00000000        0x0 obj/common.o
 .text          0x00000000        0x0 obj/gbfs.o
 .data          0x00000000        0x0 obj/gbfs.o
 .text          0x00000000        0x0 obj/bg.o
 .data          0x00000000        0x0 obj/bg.o
 .text          0x00000000        0x0 obj/irq.arm.o
 .data          0x00000000        0x0 obj/irq.arm.o
 .bss           0x00000000        0x0 obj/irq.arm.o
 .text          0x00000000        0x0 obj/key.o
 .data          0x00000000        0x0 obj/key.o
 .text          0x00000000        0x0 obj/main.o
 .data          0x00000000        0x0 obj/main.o
 .bss           0x00000000        0x0 obj/main.o
 .text          0x00000000        0x0 obj/vgm.arm.o
 .data          0x00000000        0x0 obj/vgm.arm.o
 .data          0x00000000        0x0 C:/devkitPro/libgba/lib\libgba.a(Div.o)
 .bss           0x00000000        0x0 C:/devkitPro/libgba/lib\libgba.a(Div.o)

Memory Configuration

Name             Origin             Length             Attributes
rom              0x08000000         0x02000000
iwram            0x03000000         0x00008000
ewram            0x02000000         0x00040000
*default*        0x00000000         0xffffffff

Linker script and memory map

                0x08000000                        __text_start = ORIGIN (rom)
                0x02040000                        __eheap_end = (ORIGIN (ewram) + LENGTH (ewram))
                0x03000000                        __iwram_start = ORIGIN (iwram)
                0x03008000                        __iwram_top = (ORIGIN (iwram) + LENGTH (iwram))
                0x03007fa0                        __sp_irq = (__iwram_top - 0x60)
                0x03007f00                        __sp_usr = (__sp_irq - 0xa0)
                0x03007ff8                        __irq_flags = 0x3007ff8
                0x08000000                        . = __text_start

.crt0           0x08000000      0x1f8
 *(.crt0)
 .crt0          0x08000000      0x1f8 obj/crt0.o
                0x08000000                _start
                0x080000c4                __boot_method
                0x080000c5                __slave_number
                0x080000e0                start_vector
                0x080001f8                        . = ALIGN (0x4)

.init
 *(SORT_NONE(.init))

.plt            0x080001f8        0x0
 *(.plt)
                0x080001f8                        . = ALIGN (0x4)

.text           0x080001f8      0x25c
 *(EXCLUDE_FILE(*.iwram*) .text*)
 .text.startup  0x080001f8      0x24c obj/main.o
                0x080001f8                main
 .text          0x08000444       0x10 C:/devkitPro/libgba/lib\libgba.a(Div.o)
                0x08000444                Div
                0x08000448                DivMod
                0x0800044e                DivAbs
 *(.gnu.linkonce.t.*)
 *(.text.*personality*)
 *(.gnu.warning)
 *(.glue_7t)
 .glue_7t       0x08000454        0x0 linker stubs
 *(.glue_7)
 .glue_7        0x08000454        0x0 linker stubs
 *(.vfp11_veneer)
 .vfp11_veneer  0x08000454        0x0 linker stubs
                0x08000454                        . = ALIGN (0x4)
                0x08000454                        __text_end = .

.v4_bx          0x08000454        0x0
 .v4_bx         0x08000454        0x0 linker stubs

.iplt           0x08000454        0x0
 .iplt          0x08000454        0x0 obj/crt0.o

.fini           0x08000454        0x0
 *(.fini)
                0x08000454                        . = ALIGN (0x4)

.rodata         0x08000454     0x428c
 *(.rodata)
 .rodata        0x08000454     0x4020 obj/font_ascii.o
                0x08000454                font_asciiTiles
                0x08004454                font_asciiPal
 .rodata        0x08004474      0x108 obj/common.o
 .rodata        0x0800457c       0x20 obj/bg.o
 *all.rodata*(*)
 *(.roda)
 *(.rodata.*)
 .rodata.str1.4
                0x0800459c       0xb0 obj/gbfs.o
 .rodata.str1.4
                0x0800464c       0x79 obj/main.o
                                 0x85 (size before relaxing)
 *fill*         0x080046c5        0x3 ff
 .rodata.str1.4
                0x080046c8       0x15 obj/vgm.arm.o
 *(.gnu.linkonce.r*)
                0x080046e0                        . = ALIGN (0x4)
 *fill*         0x080046dd        0x3 ff

.ARM.extab
 *(.ARM.extab* .gnu.linkonce.armextab.*)
                0x080046e0                        __exidx_start = .

.ARM.exidx
 *(.ARM.exidx* .gnu.linkonce.armexidx.*)
                0x080046e0                        __exidx_end = .

.ctors          0x080046e0        0x0
 *crtbegin.o(.ctors)
 *(EXCLUDE_FILE(*crtend.o) .ctors)
 *(SORT_BY_NAME(.ctors.*))
 *(.ctors)
                0x080046e0                        . = ALIGN (0x4)

.dtors          0x080046e0        0x0
 *crtbegin.o(.dtors)
 *(EXCLUDE_FILE(*crtend.o) .dtors)
 *(SORT_BY_NAME(.dtors.*))
 *(.dtors)
                0x080046e0                        . = ALIGN (0x4)

.eh_frame       0x080046e0        0x0
 *(.eh_frame)
                0x080046e0                        . = ALIGN (0x4)

.gcc_except_table
                0x080046e0        0x0
 *(.gcc_except_table)
                0x080046e0                        . = ALIGN (0x4)
                0x080046e0                        __iwram_lma = .

.iwram          0x03000000      0xb10 load address 0x080046e0
                0x03000000                        __iwram_start__ = ABSOLUTE (.)
 *(.iwram .iwram*)
 .iwram         0x03000000      0x594 obj/common.o
                0x03000000                _SprintfNum
                0x03000078                _SprintfNumCol
                0x03000150                _SprintfHex
                0x030001c8                _SprintfHexCol
                0x0300029c                _DoSprintf
                0x03000518                _Sprintf
                0x03000530                _Printf
                0x03000554                _SprintfString
                0x03000568                SystemError
                0x03000584                mappylog
 .iwram         0x03000594      0x1c0 obj/gbfs.o
                0x03000594                GbfsGetPointer
                0x0300061c                GbfsGetPointer2
                0x0300065c                GbfsGetSafePointer
                0x030006fc                GbfsGetSafePointer2
 .iwram         0x03000754       0x78 obj/bg.o
                0x03000754                BgDrawStr
                0x0300077c                BgDrawPrintf
 .iwram         0x030007cc       0x60 obj/irq.arm.o
                0x030007cc                IrqHandler
 .iwram         0x0300082c       0x94 obj/key.o
                0x0300082c                KeyExec
                0x03000890                KeyGetCnt
                0x0300089c                KeyGetTrg
                0x030008a8                KeyGetOff
                0x030008b4                KeyGetRep
 .iwram         0x030008c0      0x230 obj/vgm.arm.o
                0x030008c0                VgmStop
                0x03000948                VgmIntrVblank
 .iwram.__stub  0x03000af0       0x20 linker stubs
 *iwram.*(.text* .data*)
                0x03000b10                        . = ALIGN (0x4)
                0x03000b10                        __iwram_end__ = ABSOLUTE (.)
                0x080051f0                        __data_lma = (__iwram_lma + SIZEOF (.iwram))

.bss            0x03000b10       0x78
                0x03000b10                        __bss_start = ABSOLUTE (.)
                0x03000b10                        __bss_start__ = ABSOLUTE (.)
 *(.dynbss)
 *(.gnu.linkonce.b*)
 *(.bss*)
 .bss           0x03000b10        0xc obj/gbfs.o
                0x03000b10                Gbfs
 .bss           0x03000b1c       0x40 obj/bg.o
                0x03000b1c                Bg
 .bss           0x03000b5c        0xa obj/key.o
                0x03000b5c                Key
 *fill*         0x03000b66        0x2 
 .bss           0x03000b68       0x20 obj/vgm.arm.o
                0x03000b68                Vgm
 *(COMMON)
                0x03000b88                        . = ALIGN (0x4)
                0x03000b88                        __bss_end__ = ABSOLUTE (.)

.data           0x03000b88        0x0 load address 0x080051f0
                0x03000b88                        __data_start__ = ABSOLUTE (.)
 *(.data*)
 *(.gnu.linkonce.d*)
                0x03000b88                        . = ALIGN (0x4)
                0x080051f0                        __preinit_lma = (__data_lma + SIZEOF (.data))

.igot.plt       0x03000b10        0x0 load address 0x080051f0
 .igot.plt      0x03000b10        0x0 obj/crt0.o

.preinit_array  0x03000b88        0x0 load address 0x080051f0
                0x03000b88                        __preinit_array_start = ABSOLUTE (.)
 *(.preinit_array)
                0x03000b88                        __preinit_array_end = ABSOLUTE (.)
                0x080051f0                        __init_lma = (__preinit_lma + SIZEOF (.preinit_array))

.init_array     0x03000b88        0x0 load address 0x080051f0
                0x03000b88                        __init_array_start = ABSOLUTE (.)
 *(SORT_BY_NAME(.init_array.*))
 *(.init_array)
                0x03000b88                        __init_array_end = ABSOLUTE (.)
                0x080051f0                        __fini_lma = (__init_lma + SIZEOF (.init_array))

.fini_array     0x03000b88        0x0 load address 0x080051f0
                0x03000b88                        __fini_array_start = ABSOLUTE (.)
 *(SORT_BY_NAME(.fini_array.*))
 *(.fini_array)
                0x03000b88                        __fini_array_end = ABSOLUTE (.)
                0x080051f0                        __jcr_lma = (__fini_lma + SIZEOF (.fini_array))

.jcr
 *(.jcr)
                0x03000b88                        __data_end__ = ABSOLUTE (.)
                0x080051f0                        __iwram_overlay_lma = (__jcr_lma + SIZEOF (.jcr))
                0x03000b88                        __iwram_overlay_start = .

.iwram0         0x03000b88        0x0 load address 0x080051f0
 *(.iwram0)
                0x03000b88                        . = ALIGN (0x4)
                0x080051f0                        PROVIDE (__load_start_iwram0 = LOADADDR (.iwram0))
                0x080051f0                        PROVIDE (__load_stop_iwram0 = (LOADADDR (.iwram0) + SIZEOF (.iwram0)))

.iwram1         0x03000b88        0x0
 *(.iwram1)
                0x03000b88                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram1 = LOADADDR (.iwram1))
                [!provide]                        PROVIDE (__load_stop_iwram1 = (LOADADDR (.iwram1) + SIZEOF (.iwram1)))

.iwram2         0x03000b88        0x0
 *(.iwram2)
                0x03000b88                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram2 = LOADADDR (.iwram2))
                [!provide]                        PROVIDE (__load_stop_iwram2 = (LOADADDR (.iwram2) + SIZEOF (.iwram2)))

.iwram3         0x03000b88        0x0
 *(.iwram3)
                0x03000b88                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram3 = LOADADDR (.iwram3))
                [!provide]                        PROVIDE (__load_stop_iwram3 = (LOADADDR (.iwram3) + SIZEOF (.iwram3)))

.iwram4         0x03000b88        0x0
 *(.iwram4)
                0x03000b88                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram4 = LOADADDR (.iwram4))
                [!provide]                        PROVIDE (__load_stop_iwram4 = (LOADADDR (.iwram4) + SIZEOF (.iwram4)))

.iwram5         0x03000b88        0x0
 *(.iwram5)
                0x03000b88                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram5 = LOADADDR (.iwram5))
                [!provide]                        PROVIDE (__load_stop_iwram5 = (LOADADDR (.iwram5) + SIZEOF (.iwram5)))

.iwram6         0x03000b88        0x0
 *(.iwram6)
                0x03000b88                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram6 = LOADADDR (.iwram6))
                [!provide]                        PROVIDE (__load_stop_iwram6 = (LOADADDR (.iwram6) + SIZEOF (.iwram6)))

.iwram7         0x03000b88        0x0
 *(.iwram7)
                0x03000b88                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram7 = LOADADDR (.iwram7))
                [!provide]                        PROVIDE (__load_stop_iwram7 = (LOADADDR (.iwram7) + SIZEOF (.iwram7)))

.iwram8         0x03000b88        0x0
 *(.iwram8)
                0x03000b88                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram8 = LOADADDR (.iwram8))
                [!provide]                        PROVIDE (__load_stop_iwram8 = (LOADADDR (.iwram8) + SIZEOF (.iwram8)))

.iwram9         0x03000b88        0x0
 *(.iwram9)
                0x03000b88                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__load_start_iwram9 = LOADADDR (.iwram9))
                [!provide]                        PROVIDE (__load_stop_iwram9 = (LOADADDR (.iwram9) + SIZEOF (.iwram9)))
                0x03000b88                        __iwram_overlay_end = .
                0x080051f0                        __ewram_lma = (__iwram_overlay_lma + (__iwram_overlay_end - __iwram_overlay_start))
                0x03000b88                        __iheap_start = .
                0x02000000                        __ewram_start = ORIGIN (ewram)

.ewram          0x02000000      0x5e8 load address 0x080051f0
 *(.ewram*)
 .ewram         0x02000000      0x178 obj/common.o
                0x02000000                _Strlen
                0x02000018                _Strncpy
                0x0200005c                _Strncmp
                0x0200009c                _Strcat
                0x020000bc                _Strchr
                0x020000d0                _Memcpy
                0x02000134                _Memcmp
                0x0200015c                _Memset
 .ewram         0x02000178       0xc8 obj/gbfs.o
                0x02000178                GbfsInit
                0x020001d8                GbfsGetFileName
                0x020001e8                GbfsGetFileSize
                0x0200020c                GbfsGetArcSize
                0x0200022c                GbfsGetArcCnt
 .ewram         0x02000240      0x21c obj/bg.o
                0x02000240                BgInitLcd
                0x02000350                BgInit
                0x020003e0                Bg0Init
                0x02000450                Bg1Init
                0x02000454                Bg2Init
                0x02000458                Bg3Init
 .ewram         0x0200045c       0x48 obj/irq.arm.o
                0x0200045c                IrqInit
 .ewram         0x020004a4       0x20 obj/key.o
                0x020004a4                KeyInit
 .ewram         0x020004c4      0x124 obj/vgm.arm.o
                0x020004c4                VgmInit
                0x020004f0                VgmPlay
                0x020005ac                VgmGetOffsetPlay
                0x020005c0                VgmGetLoopCnt
                0x020005d0                VgmGetWave
                0x020005e8                        . = ALIGN (0x4)
                0x020005e8                        __ewram_end = ABSOLUTE (.)
                0x080057d8                        __pad_lma = (__ewram_lma + SIZEOF (.ewram))

.sbss           0x020005e8        0x0
                0x020005e8                        __sbss_start__ = ABSOLUTE (.)
 *(.sbss*)
                0x020005e8                        . = ALIGN (0x4)
                0x020005e8                        __sbss_end__ = ABSOLUTE (.)
                0x020005e8                        __end__ = ABSOLUTE (.)
                0x020005e8                        __eheap_start = ABSOLUTE (.)

.pad            0x020005e8        0x8 load address 0x080057d8
                0x020005e8        0x4 LONG 0x52416b64
                0x020005ec        0x4 LONG 0x4d
                0x020005f0                        . = ALIGN (0x4)
                0x080057e0                        __rom_end__ = (__pad_lma + SIZEOF (.pad))

.rel.dyn        0x020005f0        0x0 load address 0x080057e0
 .rel.iplt      0x020005f0        0x0 obj/crt0.o

.stab
 *(.stab)

.stabstr
 *(.stabstr)

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x00000000       0x23
 *(.comment)
 .comment       0x00000000       0x23 obj/common.o
                                 0x24 (size before relaxing)
 .comment       0x00000023       0x24 obj/gbfs.o
 .comment       0x00000023       0x24 obj/bg.o
 .comment       0x00000023       0x24 obj/irq.arm.o
 .comment       0x00000023       0x24 obj/key.o
 .comment       0x00000023       0x24 obj/main.o
 .comment       0x00000023       0x24 obj/vgm.arm.o

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges  0x00000000      0x260
 *(.debug_aranges)
 .debug_aranges
                0x00000000       0xa8 obj/common.o
 .debug_aranges
                0x000000a8       0x60 obj/gbfs.o
 .debug_aranges
                0x00000108       0x58 obj/bg.o
 .debug_aranges
                0x00000160       0x28 obj/irq.arm.o
 .debug_aranges
                0x00000188       0x48 obj/key.o
 .debug_aranges
                0x000001d0       0x20 obj/main.o
 .debug_aranges
                0x000001f0       0x50 obj/vgm.arm.o
 .debug_aranges
                0x00000240       0x20 C:/devkitPro/libgba/lib\libgba.a(Div.o)

.debug_pubnames
 *(.debug_pubnames)

.debug_info     0x00000000     0x2c09
 *(.debug_info)
 .debug_info    0x00000000     0x13a5 obj/common.o
 .debug_info    0x000013a5      0x586 obj/gbfs.o
 .debug_info    0x0000192b      0x508 obj/bg.o
 .debug_info    0x00001e33      0x1b3 obj/irq.arm.o
 .debug_info    0x00001fe6      0x2ab obj/key.o
 .debug_info    0x00002291      0x598 obj/main.o
 .debug_info    0x00002829      0x3ba obj/vgm.arm.o
 .debug_info    0x00002be3       0x26 C:/devkitPro/libgba/lib\libgba.a(Div.o)

.debug_abbrev   0x00000000      0xe7d
 *(.debug_abbrev)
 .debug_abbrev  0x00000000      0x336 obj/common.o
 .debug_abbrev  0x00000336      0x278 obj/gbfs.o
 .debug_abbrev  0x000005ae      0x289 obj/bg.o
 .debug_abbrev  0x00000837       0xeb obj/irq.arm.o
 .debug_abbrev  0x00000922      0x14c obj/key.o
 .debug_abbrev  0x00000a6e      0x16c obj/main.o
 .debug_abbrev  0x00000bda      0x28f obj/vgm.arm.o
 .debug_abbrev  0x00000e69       0x14 C:/devkitPro/libgba/lib\libgba.a(Div.o)

.debug_line     0x00000000     0x1fe7
 *(.debug_line)
 .debug_line    0x00000000      0xbe8 obj/common.o
 .debug_line    0x00000be8      0x36c obj/gbfs.o
 .debug_line    0x00000f54      0x523 obj/bg.o
 .debug_line    0x00001477      0x1a0 obj/irq.arm.o
 .debug_line    0x00001617      0x21a obj/key.o
 .debug_line    0x00001831      0x28b obj/main.o
 .debug_line    0x00001abc      0x4b1 obj/vgm.arm.o
 .debug_line    0x00001f6d       0x7a C:/devkitPro/libgba/lib\libgba.a(Div.o)

.debug_frame    0x00000000      0x5a0
 *(.debug_frame)
 .debug_frame   0x00000000      0x214 obj/common.o
 .debug_frame   0x00000214       0xec obj/gbfs.o
 .debug_frame   0x00000300       0xcc obj/bg.o
 .debug_frame   0x000003cc       0x4c obj/irq.arm.o
 .debug_frame   0x00000418       0x84 obj/key.o
 .debug_frame   0x0000049c       0x3c obj/main.o
 .debug_frame   0x000004d8       0xc8 obj/vgm.arm.o

.debug_str      0x00000000      0x8e2
 *(.debug_str)
 .debug_str     0x00000000      0x232 obj/common.o
                                0x295 (size before relaxing)
 .debug_str     0x00000232      0x108 obj/gbfs.o
                                0x2ac (size before relaxing)
 .debug_str     0x0000033a      0x205 obj/bg.o
                                0x37d (size before relaxing)
 .debug_str     0x0000053f      0x18c obj/irq.arm.o
                                0x263 (size before relaxing)
 .debug_str     0x000006cb       0xd0 obj/key.o
                                0x24d (size before relaxing)
 .debug_str     0x0000079b       0x5d obj/main.o
                                0x2d2 (size before relaxing)
 .debug_str     0x000007f8       0x5a obj/vgm.arm.o
                                0x20c (size before relaxing)
 .debug_str     0x00000852       0x90 C:/devkitPro/libgba/lib\libgba.a(Div.o)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

.stack          0x00080000        0x0
                0x00080000                        _stack = .
 *(.stack)

.note.gnu.arm.ident
 *(.note.gnu.arm.ident)

.ARM.attributes
                0x00000000       0x22
 *(.ARM.attributes)
 .ARM.attributes
                0x00000000       0x1a obj/font_ascii.o
 .ARM.attributes
                0x0000001a       0x20 obj/crt0.o
 .ARM.attributes
                0x0000003a       0x26 obj/common.o
 .ARM.attributes
                0x00000060       0x26 obj/gbfs.o
 .ARM.attributes
                0x00000086       0x26 obj/bg.o
 .ARM.attributes
                0x000000ac       0x26 obj/irq.arm.o
 .ARM.attributes
                0x000000d2       0x26 obj/key.o
 .ARM.attributes
                0x000000f8       0x26 obj/main.o
 .ARM.attributes
                0x0000011e       0x26 obj/vgm.arm.o
 .ARM.attributes
                0x00000144       0x1a C:/devkitPro/libgba/lib\libgba.a(Div.o)

/DISCARD/
 *(.note.GNU-stack)
LOAD obj/font_ascii.o
LOAD obj/crt0.o
LOAD obj/common.o
LOAD obj/gbfs.o
LOAD obj/bg.o
LOAD obj/irq.arm.o
LOAD obj/key.o
LOAD obj/main.o
LOAD obj/vgm.arm.o
LOAD C:/devkitPro/libgba/lib\libgba.a
OUTPUT(test.elf elf32-littlearm)
LOAD linker stubs

.debug_loclists
                0x00000000     0x1efc
 .debug_loclists
                0x00000000     0x1995 obj/common.o
 .debug_loclists
                0x00001995      0x1eb obj/gbfs.o
 .debug_loclists
                0x00001b80      0x128 obj/bg.o
 .debug_loclists
                0x00001ca8       0x20 obj/irq.arm.o
 .debug_loclists
                0x00001cc8       0x3d obj/key.o
 .debug_loclists
                0x00001d05       0xed obj/main.o
 .debug_loclists
                0x00001df2      0x10a obj/vgm.arm.o

.debug_rnglists
                0x00000000      0x2d4
 .debug_rnglists
                0x00000000      0x12f obj/common.o
 .debug_rnglists
                0x0000012f       0x60 obj/gbfs.o
 .debug_rnglists
                0x0000018f       0x3f obj/bg.o
 .debug_rnglists
                0x000001ce       0x19 obj/irq.arm.o
 .debug_rnglists
                0x000001e7       0x31 obj/key.o
 .debug_rnglists
                0x00000218       0x14 obj/main.o
 .debug_rnglists
                0x0000022c       0xa8 obj/vgm.arm.o
